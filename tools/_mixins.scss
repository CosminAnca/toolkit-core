// =============================================================================
// TOOLS / MIXINS
// =============================================================================

// Add color to color map (settings/_colors)
// ===========================================

// $name - Name of the color
// $value - Hex value of the color

// For example:
//
//   @include add-color(sky1, #0076be);
//
//   .foo {
//     color: color(sky1);
//   }
@mixin add-color($key, $value) {
  $new-color: ($key: $value);

  @if type-of($value) == color {
    $colors: map-merge($colors, $new-color) !global;
  }

  @else {
    @warn "#{$value} is not a valid color.";
  }
}

// Focus outline
// ===========================================

// Generates a consistent outline shadow for use on `:focus` or `.has-focus`.
@mixin focus-styles($color: default) {
  outline: none;

  @if ($color == "default") {
    box-shadow: 0 1px 3px rgba(color(black), 0.4), 0 1px 15px 3px rgba(color(highlight), 0.75);
  }

  @elseif ($color == "invert") {
    box-shadow: 0 1px 3px rgba(color(black), 0.75), 0 1px 15px 3px rgba(color(white), 0.75);
  }

  @else {
    @warn "`#{$color}` is not a valid outline color, it must be `default` or `invert`.";
  }
}

// Making accessible hover/focus states simpler
// ===========================================

// Generate `:hover` and `:focus` styles in one go.
// http://www.456bereastreet.com/archive/201004/whenever_you_use_hover_also_use_focus/
@mixin hocus() {
  &:hover,
  &:focus {
    @content;
  }
}

// Removing elements from view and/or ATs
// ===========================================

// Visually hide content, leaving it accessible to screenreaders and ATs.
// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin hide-visually() {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
}

// Completely hide content both visually from the screen, and from screenreaders
// and ATs.
@mixin hide-completely() {
  display: none !important;
}

// Clearfix mixin for use later in the project
// ===========================================
@mixin clearfix() {

  &::after {
    content: "";
    display: table;
    clear: both;
  }

}

// Panel Indicator
// ===========================================

// Adds panel indicator to show relationship with element that opened it.
@mixin panel-indicator($theme: "default") {
  $indicator-arrow-size: 22px !default;
  $indicator-arrow-color: color(white);

  /**
   * Arrow markers to signify panel relationship.
   *
   * 1. Positions the marker between element and panel
   * 2. Need to take off an extra pixel here to allow for browser rendering/
   *    rounding quirks.
   * 3. Rotate 45deg to allow it to mask the panel gradient and look like a
   *    notch in the panel (webkit placed after to prevent render quirk)
   * 4. Box-shadow that matches the panel background color to smooth the
   *    shadow transition
   * 5. Inset box-shadow that is offset to be visible only on the top edges
   */
  &::before,
  &::after {
    display: block;
    content: "";
    position: absolute;  /* [1] */
    bottom: -$global-spacing-unit - ($indicator-arrow-size/2) - 1px; /* [1, 2] */
    left: 50%;  /* [1] */
    width: $indicator-arrow-size;
    height: $indicator-arrow-size;
    margin-left: -$indicator-arrow-size/2; /* [1] */
    -ms-transform: rotate(45deg); /* [3] */
    transform: rotate(45deg); /* [3] */
    -webkit-transform: translate3d(0, 0, 0) rotate(45deg); /* [3] */
  }

  @if $theme == "default" {
    &::before {
      box-shadow: 5px 5px 8px $indicator-arrow-color; /* [4] */
    }

    &::after {
      background-color: $indicator-arrow-color;
      box-shadow: inset $indicator-arrow-size/2 $indicator-arrow-size/2 $indicator-arrow-size/2 (-$indicator-arrow-size / 2) #9f9f9f; /* [5] */
    }
  }

  @if $theme == "dark" {
    &::before {
      box-shadow: 5px 5px 8px color(grey-50); /* [4] */
    }

    &::after {
      background-color: color(grey-50);
      box-shadow: inset $indicator-arrow-size/2 $indicator-arrow-size/2 $indicator-arrow-size/2 (-$indicator-arrow-size / 2) color(black); /* [5] */
    }
  }

  @else {
    @warn "`#{$theme}` is not a valid theme, it must be `default` or `dark`.";
  }

}
