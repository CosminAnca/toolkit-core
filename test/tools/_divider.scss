// =============================================================================
// TEST / TOOLS / DIVDER
// =============================================================================

@import "../../tools/functions";
@import "../../tools/divider";

// Test configuration
// ===========================================

@mixin divider_before {
  $colors: (
    keyline: #c0c0c0,
    text: #4a4a4a
  ) !global;

  $divider-gradient-color: #bada55 !global;
  $divider-shadow-color: #000 !global;
}

// Background gradient mixin
// ===========================================

@include test-module("@mixin divider-gradient") {
  @include divider_before();

  @include test("should return a divider gradient for the bottom edge for when no direction is set") {
    @include assert("compiles divider gradient for the bottom edge") {
      @include input {
        @include divider-gradient();
      }

      @include expect {
        background: #c0c0c0;
        background: -webkit-linear-gradient(left, transparent, #c0c0c0, transparent);
        background: -moz-linear-gradient(left, transparent, #c0c0c0, transparent);
        background: -ms-linear-gradient(left, transparent, #c0c0c0, transparent);
        background: -o-linear-gradient(left, transparent, #c0c0c0, transparent);
        background: linear-gradient(to right, transparent, #c0c0c0, transparent);
      }
    }
  }

  @include test("should return a divider gradient for the right edge when a right direction is set") {
    @include assert("compiles divider gradient for the right edge") {
      @include input {
        @include divider-gradient(right);
      }

      @include expect {
        background: #c0c0c0;
        background: -webkit-linear-gradient(top, transparent, #c0c0c0, transparent);
        background: -moz-linear-gradient(top, transparent, #c0c0c0, transparent);
        background: -ms-linear-gradient(top, transparent, #c0c0c0, transparent);
        background: -o-linear-gradient(top, transparent, #c0c0c0, transparent);
        background: linear-gradient(to bottom, transparent, #c0c0c0, transparent);
      }
    }
  }

  @include test("should return a custom divider gradient for the right edge when a right direction and color is set") {
    @include assert("compiles a custom divider gradient for the right edge") {
      @include input {
        @include divider-gradient(right, $divider-gradient-color);
      }

      @include expect {
        background: #bada55;
        background: -webkit-linear-gradient(top, transparent, #bada55, transparent);
        background: -moz-linear-gradient(top, transparent, #bada55, transparent);
        background: -ms-linear-gradient(top, transparent, #bada55, transparent);
        background: -o-linear-gradient(top, transparent, #bada55, transparent);
        background: linear-gradient(to bottom, transparent, #bada55, transparent);
      }
    }
  }
}


@include test-module("@mixin divider-shadow") {
  @include divider_before();

  @include test("should return a divider shadow for the bottom edge for when no direction is set") {
    @include assert("compiles divider shadow for the bottom edge") {
      @include input {
        @include divider-shadow();
      }

      @include expect {
        background: -webkit-radial-gradient(50% 0%, rgba(74, 74, 74, 0.15), transparent 40%);
        background: -moz-radial-gradient(50% 0%, rgba(74, 74, 74, 0.15), transparent 40%);
        background: -ms-radial-gradient(50% 0%, rgba(74, 74, 74, 0.15), transparent 40%);
        background: -o-radial-gradient(50% 0%, rgba(74, 74, 74, 0.15), transparent 40%);
        background: radial-gradient(at 50% 0%, rgba(74, 74, 74, 0.15), transparent 40%);
      }
    }
  }

  @include test("should return a divider shadow for the right edge when a right direction is set") {
    @include assert("compiles divider shadow for the right edge") {
      @include input {
        @include divider-shadow(right);
      }

      @include expect {
        background: -webkit-radial-gradient(0 50%, farthest-corner, rgba(74, 74, 74, 0.15), transparent 40%);
        background: -moz-radial-gradient(0 50%, farthest-corner, rgba(74, 74, 74, 0.15), transparent 40%);
        background: -ms-radial-gradient(0 50%, farthest-corner, rgba(74, 74, 74, 0.15), transparent 40%);
        background: -o-radial-gradient(0 50%, farthest-corner, rgba(74, 74, 74, 0.15), transparent 40%);
        background: radial-gradient(farthest-corner at 0 50%, rgba(74, 74, 74, 0.15), transparent 40%);
      }
    }
  }

  @include test("should return a custom divider shadow for the right edge when a right direction and color is set") {
    @include assert("compiles a custom divider shadow for the right edge") {
      @include input {
        @include divider-shadow(right, $divider-shadow-color);
      }

      @include expect {
        background: -webkit-radial-gradient(0 50%, farthest-corner, #000, transparent 40%);
        background: -moz-radial-gradient(0 50%, farthest-corner, #000, transparent 40%);
        background: -ms-radial-gradient(0 50%, farthest-corner, #000, transparent 40%);
        background: -o-radial-gradient(0 50%, farthest-corner, #000, transparent 40%);
        background: radial-gradient(farthest-corner at 0 50%, #000, transparent 40%);
      }
    }
  }
}
